## This macro executes 'func' on every element in list and prints 'delimiter' between
#  macro foreach(list, func, delimiter) 
#     for element in list
         {{- func(element) -}}
#        if not loop.last
            {{- delimiter -}}
#        endif
#     endfor
#  endmacro

##- Type macro
# macro typestr(type)
#     set type = type.prune()
#     if type.isVariable()
         {{- unique(type.getSeq()) -}}
#     elif type.isInteger()
         {{- "Int" -}}
#     elif type.isBoolean()
         {{- "Bool" -}}
#     elif type.isTuple()
         {{- "(" + foreach(type.getTypes(), typestr, ", ") + ")" -}}
#     elif type.isList()
         {{- "[" + foreach(type.getTypes(), typestr, "") + "]" -}}
#     elif type.isFunction()
         {{- foreach(type.getTypes(), typestr, " -> ") -}}
#     else
         {{- "?" -}}
#     endif
# endmacro

##- Node macro
#  macro each_node(node)
#     if node.isVariable()
#        if node.tokenId() == 'INT'
            {{- node.value() -}}
#        elif node.tokenId() == 'STRING'
            {{- "[" + ord(node.value()) + "]" -}}
#        else
            {{- node.value() -}}
#        endif
#     elif node.isTuple()
         ## A tuple
         {{- "(" + foreach(node, each_node, ", ") + ")" -}}      
#     elif node.isList()
         ## A list
         {{- "[" + foreach(node, each_node, ", ") + "]" -}}      
#     elif node.isApplication()
         ## A function call
         {{- foreach(node, each_node, " ") -}} 
#     elif node.isLambda()
         ## A lambda function
         {{- "\\\\(" + node[0]|join(', ') + ") -> " + each_node(node[1]) -}}
#     endif
# endmacro

##- Define a haskell function for every definition in ast
      {{- name + " :: " + typestr(type) + "\n" -}}
#-    if value.isLambda()
      {{- name ~ " (" + value[0]|join(', ') + ") = " + each_node(value[1]) + "\n\n" -}}
#-    else
      {{- name ~ " = " + each_node(value) + "\n\n" -}}
#-    endif
